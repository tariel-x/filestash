// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/rclone/rclone/fs (interfaces: Fs)

// Package mock_fs is a generated GoMock package.
package mock_fs

import (
	context "context"
	io "io"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
	fs "github.com/rclone/rclone/fs"
	hash "github.com/rclone/rclone/fs/hash"
)

// MockFs is a mock of Fs interface.
type MockFs struct {
	ctrl     *gomock.Controller
	recorder *MockFsMockRecorder
}

// MockFsMockRecorder is the mock recorder for MockFs.
type MockFsMockRecorder struct {
	mock *MockFs
}

// NewMockFs creates a new mock instance.
func NewMockFs(ctrl *gomock.Controller) *MockFs {
	mock := &MockFs{ctrl: ctrl}
	mock.recorder = &MockFsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFs) EXPECT() *MockFsMockRecorder {
	return m.recorder
}

// Features mocks base method.
func (m *MockFs) Features() *fs.Features {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Features")
	ret0, _ := ret[0].(*fs.Features)
	return ret0
}

// Features indicates an expected call of Features.
func (mr *MockFsMockRecorder) Features() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Features", reflect.TypeOf((*MockFs)(nil).Features))
}

// Hashes mocks base method.
func (m *MockFs) Hashes() hash.Set {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Hashes")
	ret0, _ := ret[0].(hash.Set)
	return ret0
}

// Hashes indicates an expected call of Hashes.
func (mr *MockFsMockRecorder) Hashes() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Hashes", reflect.TypeOf((*MockFs)(nil).Hashes))
}

// List mocks base method.
func (m *MockFs) List(arg0 context.Context, arg1 string) (fs.DirEntries, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", arg0, arg1)
	ret0, _ := ret[0].(fs.DirEntries)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockFsMockRecorder) List(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockFs)(nil).List), arg0, arg1)
}

// Mkdir mocks base method.
func (m *MockFs) Mkdir(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Mkdir", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Mkdir indicates an expected call of Mkdir.
func (mr *MockFsMockRecorder) Mkdir(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Mkdir", reflect.TypeOf((*MockFs)(nil).Mkdir), arg0, arg1)
}

// Name mocks base method.
func (m *MockFs) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name.
func (mr *MockFsMockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockFs)(nil).Name))
}

// NewObject mocks base method.
func (m *MockFs) NewObject(arg0 context.Context, arg1 string) (fs.Object, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewObject", arg0, arg1)
	ret0, _ := ret[0].(fs.Object)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewObject indicates an expected call of NewObject.
func (mr *MockFsMockRecorder) NewObject(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewObject", reflect.TypeOf((*MockFs)(nil).NewObject), arg0, arg1)
}

// Precision mocks base method.
func (m *MockFs) Precision() time.Duration {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Precision")
	ret0, _ := ret[0].(time.Duration)
	return ret0
}

// Precision indicates an expected call of Precision.
func (mr *MockFsMockRecorder) Precision() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Precision", reflect.TypeOf((*MockFs)(nil).Precision))
}

// Put mocks base method.
func (m *MockFs) Put(arg0 context.Context, arg1 io.Reader, arg2 fs.ObjectInfo, arg3 ...fs.OpenOption) (fs.Object, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Put", varargs...)
	ret0, _ := ret[0].(fs.Object)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Put indicates an expected call of Put.
func (mr *MockFsMockRecorder) Put(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Put", reflect.TypeOf((*MockFs)(nil).Put), varargs...)
}

// Rmdir mocks base method.
func (m *MockFs) Rmdir(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Rmdir", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Rmdir indicates an expected call of Rmdir.
func (mr *MockFsMockRecorder) Rmdir(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Rmdir", reflect.TypeOf((*MockFs)(nil).Rmdir), arg0, arg1)
}

// Root mocks base method.
func (m *MockFs) Root() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Root")
	ret0, _ := ret[0].(string)
	return ret0
}

// Root indicates an expected call of Root.
func (mr *MockFsMockRecorder) Root() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Root", reflect.TypeOf((*MockFs)(nil).Root))
}

// String mocks base method.
func (m *MockFs) String() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "String")
	ret0, _ := ret[0].(string)
	return ret0
}

// String indicates an expected call of String.
func (mr *MockFsMockRecorder) String() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "String", reflect.TypeOf((*MockFs)(nil).String))
}
